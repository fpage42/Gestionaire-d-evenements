<?php


class sendmail{

  public $message=null;
  public $to=null;
  public $subject=null;
  public $error="";
  public $error_encoded=null;
  public $failedAddresses=array();
  public $successAddresses=array();
  
  public function sendmail(){
    $path=strpos($_SERVER["SCRIPT_NAME"],"planning/poste/ajax")?"../../":null;
    $path=preg_match('/planning\/plugins\/.*\/ajax/', $_SERVER["SCRIPT_NAME"])?"../../":$path;
    require_once("include/PHPMailer/class.phpmailer.php");
    require_once("include/PHPMailer/class.smtp.php");
  }
  

  private function prepare(){
  
    /* arrête la procédure d'envoi de mail si désactivé dans la config */
/*    if(!$GLOBALS['config']['Mail-IsEnabled']){
      $this->error.="L'envoi des e-mails est désactivé dans la configuration\n";
      $this->successAddresses=array();
      $this->failedAddresses=$this->to;
      return false;
    }
*/
    /* Met les destinataires dans un tableau s'ils sont dans une chaine de caractère séparée par des ; */
    if(!is_array($this->to)){
      $this->to=explode(";",$this->to);
    }

    /* Vérifie que les e-mails sont valides */
    $to=array();
    $incorrect=array();
    foreach($this->to as $elem){
      if(verifmail(trim($elem))){
	$to[]=trim($elem);
      }else{
	$incorrect[]=trim($elem);
	$this->failedAddresses[]=trim($elem);
      }
    }
    $this->to=$to;

    if(!empty($incorrect)){
      $this->error.="Les adresses suivantes sont incorrectes : ".join(" ; ",$incorrect)."\n";
    }

    /* Arrête la procédure si aucun destinaire valide */
    if(empty($this->to)){
      $this->error.="Aucun destinataire valide pour cet e-mail\n";
      return false;
    }

    /* Préparation du sujet */
    $this->subject = stripslashes($this->subject);
    $this->subject = "Planning : " . $this->subject;

    /* Préparation du message, html, doctype, signature */
    $message="<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">";
    $message.="<html><head><title>Planning</title></head><body>";
    $message.= $this->message;
//    $message.="<br/><br/>{$GLOBALS['config']['Mail-Signature']}<br/><br/>";
    $message.="</body></html>";
    $message = stripslashes($message);
    $message = str_replace(array("\n","\r\n\n","\r\n"), "<br/>", $message);

    $this->message = $message;

  }

  
  public function send(){
    if($this->prepare()===false){
      return false;
    }
    $mail = new PHPMailer();
//    if($GLOBALS['config']['Mail-IsMail-IsSMTP']=="IsMail")
 //     $mail->IsMail();
  //  else
      $mail->IsSMTP();
    $mail->CharSet="utf-8";
    $mail->WordWrap =$GLOBALS['config']['Mail-WordWrap'];
    $mail->Hostname =$GLOBALS['config']['Mail-Hostname'];
    $mail->Host =$GLOBALS['config']['Mail-Host'];
    $mail->Port =$GLOBALS['config']['Mail-Port'];
    $mail->SMTPSecure = $GLOBALS['config']['Mail-SMTPSecure'];
    $mail->SMTPAuth =$GLOBALS['config']['Mail-SMTPAuth'];
    $mail->Username =$GLOBALS['config']['Mail-Username'];
    $mail->Password =decrypt($GLOBALS['config']['Mail-Password']);
    $mail->From =$GLOBALS['config']['Mail-From'];
    $mail->FromName =$GLOBALS['config']['Mail-FromName'];
    $mail->IsHTML();
    
    $mail->Body = $this->message;
    
   if(count($this->to)>1){
      foreach($this->to as $elem){
        $mail->addBCC($elem);
      }
    }
    else{
      $mail->AddAddress($this->to[0]);
    }
    
    $mail->Subject = $this->subject;

    if(!$mail->Send()){
      $this->error.=$mail->ErrorInfo ."\n";
      
      // error_CJInfo: pour affichage dans CJInfo (JS)
      $this->error_CJInfo=str_replace("\n","#BR#",$this->error);
      
      // Liste des destinataires pour qui l'envoi a fonctionné
      $this->successAddresses=$this->to;

      // Liste des destinataires pour qui l'envoi a échoué
      $pos=stripos($this->error,"SMTP Error: The following recipients failed: ");

      if($pos!==false){
	$failedAddr=substr($this->error,$pos+45);
	$end=strpos($failedAddr,"\n");
	$failedAddr=substr($failedAddr,0,$end);
	$failedAddr=explode(", ",$failedAddr);

	$this->failedAddresses=array_merge($this->failedAddresses,$failedAddr);
	
	$this->successAddresses=array();
	foreach($this->to as $elem){
	  if(!in_array($elem,$failedAddr)){
	    $this->successAddresses[]=$elem;
	  }
	}
      }
    }
  return true;
  }
}

?>